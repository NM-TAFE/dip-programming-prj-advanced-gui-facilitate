diff --git a/app/app.py b/app/app.py
index 22fbc72..2c716b2 100644
--- a/app/app.py
+++ b/app/app.py
@@ -8,6 +8,12 @@
 class VideoPlayerFrame(wx.Frame):
     """
     The parent for everything in the wx user interface.
+
+
+    This class creates and arranges the following UI components:
+        * Video player panel (`VideoPlayer`)
+        * Text panel to display extracted code (`TextPanel`)
+        * Menu bar with options for opening files and quitting.
     """
 
     def __init__(self, title):
@@ -41,6 +47,11 @@ def on_key_press(self, event):
         """
         This function is called when a key is pressed.
         Its primary purpose is to check for keyboard shortcuts being pressed.
+            * Ctrl+O - Open file dialog
+            * Ctrl+Q - Quit application
+            * Space - Play/Pause video
+            * Arrow keys - Skip video playback (Left: rewind, Right: forward)
+            * Up/Down arrows - Adjust volume (Up: increase, Down: decrease)
         """
         keycode = event.GetKeyCode()
         if event.ControlDown():  # Ctrl
@@ -61,9 +72,15 @@ def on_key_press(self, event):
         event.Skip()
 
     def on_quit(self, event=None):
+        """
+        Closes the application window.
+        """
         self.Close()
 
     def on_shortcut_dialog(self, event=None):
+        """
+        Displays a dialog window listing available keyboard shortcuts.
+        """
         about_dialog = ShortcutDialog(self)
         about_dialog.ShowModal()
 
@@ -73,6 +90,12 @@ def __init__(self):
         super(MenuBar, self).__init__()
 
     def create_media_menu(self, open_func: Callable, quit_func: Callable):
+        """
+        Creates the "Media" menu with options to open video files and quit the application.
+
+        :param open_func: Function reference for opening video files (usually `VideoPlayer.open_file`).
+        :param quit_func: Function reference for quitting the application (usually `VideoPlayerFrame.on_quit
+        """
         media_menu = wx.Menu()
         open_file_item = media_menu.Append(wx.ID_ANY, 'Open File\tCtrl-O')
         self.Bind(wx.EVT_MENU, open_func, open_file_item)
@@ -207,6 +230,13 @@ def update_timeline(self, event):
             self.text_panel.update_text("")  # Clear text if no match
             
 class HighlightTimeline(wx.Panel):
+    """
+    A custom panel to represent the video timeline with highlights.
+
+    This class draws a timeline along with highlighted ranges that correspond
+    to specific segments in the video. It also displays a movable thumb
+    indicating the current playback position within the video.
+    """
     def __init__(self, parent):
         super().__init__(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.TAB_TRAVERSAL)
         self.highlights = []  # Highlight ranges
@@ -216,14 +246,32 @@ def __init__(self, parent):
         logging.debug("Initializing highlight timeline")
 
     def add_highlight_range(self, start: float, end: float):
+        """
+        Adds a new highlight range to the timeline.
+
+        Args:
+            start (float): The start time of the highlight relative to the video duration (0.0 to 1.0).
+            end (float): The end time of the highlight relative to the video duration (0.0 to 1.0).
+        """
         self.highlights.append((start, end))
         self.Refresh()
 
     def set_thumb_position(self, value):
+        """
+        Sets the position of the thumb indicator on the timeline.
+
+        Args:
+            value (float): The new position of the thumb relative to the video duration (0.0 to 1.0).
+        """
         self.thumb_position = value
         self.Refresh()
 
     def on_paint(self, event):
+        """
+        Handles the paint event to draw the timeline, highlights, and thumb indicator.
+
+        This method is called whenever the panel needs to be redrawn.
+        """
         dc = wx.BufferedPaintDC(self)
         gc = wx.GraphicsContext.Create(dc)
         width, height = self.GetClientSize()
@@ -249,6 +297,12 @@ def on_paint(self, event):
 
 
 class TextPanel(wx.Panel):
+    """
+    A panel to display extracted text content.
+
+    This class creates a read-only multiline text control to display the
+    extracted text content from the video.
+    """
     def __init__(self, parent):
         super(TextPanel, self).__init__(parent)
         self.text_ctrl = wx.TextCtrl(self, style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_NO_VSCROLL)
@@ -260,6 +314,12 @@ def __init__(self, parent):
         self.SetSizer(sizer)
 
     def update_text(self, text):
+        """
+        Updates the displayed text content in the panel.
+
+        Args:
+            text (str): The new text content to be displayed.
+        """
         self.text_ctrl.SetValue(text)
 
 
diff --git a/app/code_identifier.py b/app/code_identifier.py
index e447ea8..e0549b5 100644
--- a/app/code_identifier.py
+++ b/app/code_identifier.py
@@ -19,9 +19,25 @@ class CodeIdentifier:
     """
     This is a basic machine learning class that uses naive bayes to identify
     if the string given is either code or plain text.
+
+    Attributes:
+        vectorizer (CountVectorizer): The vectorizer used to transform code snippets into token counts.
+        nb_classifier (MultinomialNB): The Naive Bayes classifier used for prediction.
+        x_train (pd.Series): Training data for code snippets.
+        x_test (pd.Series): Test data for code snippets.
+        y_train (pd.Series): Training data for labels.
+        y_test (pd.Series): Test data for labels.
+        nb_predict_y (np.ndarray): Predictions made by the classifier on the test data.
     """
 
     def __init__(self, dataset: str = "code_identifier_dataset.csv"):
+        """
+        Initialize the CodeIdentifier by loading the dataset, splitting the data, and training the classifier.
+
+        Args:
+            dataset (str): The path to the dataset CSV file.
+                Defaults to "code_identifier_dataset.csv.
+        """
         # Load the dataset
         df = pd.read_csv(dataset)
 
@@ -42,6 +58,17 @@ def __init__(self, dataset: str = "code_identifier_dataset.csv"):
         self.nb_predict_y = self.nb_classifier.predict(x_test_counts)
 
     def __predict_language(self, clf, vectorizer, code) -> str:
+        """
+        Predicts the language (code or plain text) of a given code snippet.
+
+        Args:
+            clf (object): The trained Naive Bayes classifier.
+            vectorizer (object): The CountVectorizer used for feature extraction.
+            code (str): The code snippet to identify.
+
+        Returns:
+            str: The predicted language ("code" or "plain text").
+        """
         # Preprocess the code
         code_counts = vectorizer.transform([code])
 
@@ -53,6 +80,7 @@ def __predict_language(self, clf, vectorizer, code) -> str:
     def accuracy(self) -> float:
         """
         Get the accuracy of the naive bayes model
+
         Returns: float, the accuracy of the classifier.
         """
         return accuracy_score(self.y_test, self.nb_predict_y)
diff --git a/tests/code_identifier_test.py b/tests/code_identifier_test.py
index e2b32a8..7fcc279 100644
--- a/tests/code_identifier_test.py
+++ b/tests/code_identifier_test.py
@@ -5,7 +5,13 @@
 
 
 class CodeIdentifierTestCase(unittest.TestCase):
+    """
+    Unit tests for the CodeIdentifier class.
+    """
     def test_text_oscar_wilde(self):
+        """
+        Test identifying plain text from a literary passage.
+        """
         text_the_picture_of_dorian_gray = ("The studio was filled with the rich odor of roses, and when the light "
                                            "summer wind stirred amidst the trees of the garden, there came through "
                                            "the open door the heavy scent of the lilac, or the more delicate perfume "
@@ -16,6 +22,9 @@ def test_text_oscar_wilde(self):
         self.assertEqual("Plain Text", detected)
 
     def test_python_class(self):
+        """
+        Test identifying Python code.
+        """
         text_python_class = "class CodeIdentifierTestCase(unittest.TestCase):"
         code_identifier = CodeIdentifier("../app/code_identifier_dataset.csv")
         detected = code_identifier.identify(text_python_class)
diff --git a/tests/ocr_method_test.py b/tests/ocr_method_test.py
index c5fea77..bd1701f 100644
--- a/tests/ocr_method_test.py
+++ b/tests/ocr_method_test.py
@@ -4,7 +4,14 @@
 
 
 class CombineSegmentsTestCase(unittest.TestCase):
+    """
+    Test cases for the combine_segments method of the VideoTextExtractor class.
+    """
     def setUp(self):
+        """
+        Set up the test environment by initializing a VideoTextExtractor instance
+        and providing a list of segments for testing.
+        """
         self.text_extractor = VideoTextExtractor("example/test2 - 1716891852652.mp4",
                                                  "test.json")
         self.segments = [
@@ -51,6 +58,9 @@ def setUp(self):
         ]
 
     def test_combine_segments_combines_segments_with_same_text(self):
+        """
+        Test that combine_segments correctly combines segments with the same extracted text.
+        """
         self.text_extractor.combine_segments(self.segments)
         combined_segment = self.segments[-1]
 
@@ -58,6 +68,9 @@ def test_combine_segments_combines_segments_with_same_text(self):
         self.assertEqual(510, combined_segment["end_frame"])
 
     def test_combine_segments_combines_segments_without_text(self):
+        """
+        Test that combine_segments correctly combines segments without extracted text.
+        """
         self.text_extractor.combine_segments(self.segments)
         combined_segment = self.segments[0]
 
@@ -65,6 +78,9 @@ def test_combine_segments_combines_segments_without_text(self):
         self.assertEqual(30, combined_segment["end_frame"])
 
     def test_combine_segments_does_not_combine_unrelated_segments(self):
+        """
+        Test that combine_segments does not combine unrelated segments with different extracted text.
+        """
         self.text_extractor.combine_segments(self.segments)
         unchanged_segment = self.segments[1]
         self.assertEqual(30, unchanged_segment["start_frame"])
